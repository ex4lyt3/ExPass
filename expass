#!/bin/bash

mainDir=~/.expass

### Colors ##
ESC=$(printf '\033') RESET="${ESC}[0m" BLACK="${ESC}[30m" RED="${ESC}[31m"
GREEN="${ESC}[32m" YELLOW="${ESC}[33m" BLUE="${ESC}[34m" MAGENTA="${ESC}[35m"
CYAN="${ESC}[36m" WHITE="${ESC}[37m" DEFAULT="${ESC}[39m"

### Color Functions ##
greenprint() { printf "${GREEN}%s${RESET}\n" "$1"; }
blueprint() { printf "${BLUE}%s${RESET}\n" "$1"; }
redprint() { printf "${RED}%s${RESET}\n" "$1"; }
yellowprint() { printf "${YELLOW}%s${RESET}\n" "$1"; }
magentaprint() { printf "${MAGENTA}%s${RESET}\n" "$1"; }
cyanprint() { printf "${CYAN}%s${RESET}\n" "$1"; }

#Check if files exist
if [ -d $mainDir ] && [ -d $mainDir/data ]  && [ -f $mainDir/verify_key ];
then
    echo " ________          _______ 
|        \\        |       \\
| ▓▓▓▓▓▓▓▓__    __| ▓▓▓▓▓▓▓\\ ______   _______  _______
| ▓▓__   |  \\  /  \\ ▓▓__/ ▓▓|      \ /       \/       \\
| ▓▓  \\   \\▓▓\/  ▓▓ ▓▓    ▓▓ \\▓▓▓▓▓▓\  ▓▓▓▓▓▓▓  ▓▓▓▓▓▓▓
| ▓▓▓▓▓    >▓▓  ▓▓| ▓▓▓▓▓▓▓ /      ▓▓\▓▓    \\ \\▓▓    \\
| ▓▓_____ /  ▓▓▓▓\\| ▓▓     |  ▓▓▓▓▓▓▓_\▓▓▓▓▓▓\\_\\▓▓▓▓▓▓\\
| ▓▓     \\  ▓▓ \\▓▓\\ ▓▓      \\▓▓    ▓▓       ▓▓       ▓▓
 \\▓▓▓▓▓▓▓▓\\▓▓   \\▓▓\\▓▓       \\▓▓▓▓▓▓▓\▓▓▓▓▓▓▓ \\▓▓▓▓▓▓
                                                v2.0"
else 
    echo "ExPass has not been set up. (Essential directories do not exist)"
    echo "Solution: Execute the 'setup' file"
    exit
fi

#Check for password
verifyPassword()
{
    read -sp "Please enter your password: " masterPassword
    keyHash=$(openssl enc -nosalt -aes-256-cbc -pbkdf2 -k $masterPassword -P | shasum -a 512)
    verifyKey=$(cat $mainDir/verify_key)
    if [[ $keyHash == $verifyKey ]]
    then
        echo "VERIFIED"
    else
        echo "Password incorrect. Please retry."
        exit
    fi
}

mainMenu()
{
sleep 0.05
echo $(yellowprint "Console -> ")
read -r OPTION
#Options
case $OPTION in
encrypt | --store)
    #Encrypts
    verifyPassword
    echo $masterPassword #remove
    read -p "Enter the $(cyanprint 'TITLE') for your password entry: " titleEntry
    read -sp "Enter the $(yellowprint 'PASSWORD') for your new entry: " passwordEntry
    key=$(openssl enc -nosalt -aes-256-cbc -pbkdf2 -k $masterPassword -P | grep "key")
    iv=$(openssl enc -nosalt -aes-256-cbc -pbkdf2 -k $masterPassword -P | grep "iv")
    openssl enc -d -nosalt -aes-256-cbc -pbkdf2 -in $mainDir/data/index.enc -out $mainDir/data/index -base64 -K "${key:4:64}" -iv "${iv:4:32}"
    randomNumber=$RANDOM  
    checkIfRandom()
    {
        if [[ -f $mainDir/data/$randomNumber ]];
        then
            randomNumber=$RANDOM
            checkIfRandom
            fi
    }
    checkIfRandom
    echo "$titleEntry:$passwordEntry" > $mainDir/data/$randomNumber
    echo $randomNumber
    cat $mainDir/data/$randomNumber
    openssl enc -e -nosalt -aes-256-cbc -pbkdf2 -in $mainDir/data/$randomNumber -out $mainDir/data/$randomNumber.enc -base64 -K "${key:4:64}" -iv "${iv:4:32}"
    echo "$titleEntry:$mainDir/data/$randomNumber.enc" >> $mainDir/data/index
    rm $mainDir/data/$randomNumber
    openssl enc -e -nosalt -aes-256-cbc -pbkdf2 -in $mainDir/data/index -out $mainDir/data/index.enc -base64 -K "${key:4:64}" -iv "${iv:4:32}"
    rm $mainDir/data/index
    mainMenu
    exit
    ;;
decrypt)
    if [ $# -gt 1 ] 
    then
    verifyPassword
    key=$(openssl enc -nosalt -aes-256-cbc -pbkdf2 -k $masterPassword -P | grep "key")
    iv=$(openssl enc -nosalt -aes-256-cbc -pbkdf2 -k $masterPassword -P | grep "iv")
    openssl enc -d -nosalt -aes-256-cbc -pbkdf2 -in $mainDir/data/index.enc -out $mainDir/data/index -base64 -K "${key:4:64}" -iv "${iv:4:32}"
    title=$(cat $mainDir/data/index | grep "${@:2}")
    entryFile=$(cut -d: -f 2 <<< $title)
    cat $entryFile > $mainDir/result.enc
    openssl enc -d -nosalt -aes-256-cbc -pbkdf2 -in $mainDir/result.enc -base64 -K "${key:4:64}" -iv "${iv:4:32}"
    rm $mainDir/result.enc
    rm $mainDir/data/index
    else
    echo "Invalid argument(s) supplied."
    fi
    mainMenu
    exit
    ;;
search)
    if [ $# -gt 1 ] 
    then
    verifyPassword
    key=$(openssl enc -nosalt -aes-256-cbc -pbkdf2 -k $masterPassword -P | grep "key")
    iv=$(openssl enc -nosalt -aes-256-cbc -pbkdf2 -k $masterPassword -P | grep "iv")
    openssl enc -d -nosalt -aes-256-cbc -pbkdf2 -in $mainDir/data/index.enc -out $mainDir/data/index -base64 -K "${key:4:64}" -iv "${iv:4:32}"
    cat $mainDir/data/index | grep "${@:2}" #"all arguments after first"
    else
    echo "Invalid argument(s) supplied."
    fi
    mainMenu
    exit
    ;;
list)
    verifyPassword
    key=$(openssl enc -nosalt -aes-256-cbc -pbkdf2 -k $masterPassword -P | grep "key")
    iv=$(openssl enc -nosalt -aes-256-cbc -pbkdf2 -k $masterPassword -P | grep "iv")
    openssl enc -d -nosalt -aes-256-cbc -pbkdf2 -in $mainDir/data/index.enc -out $mainDir/data/index -base64 -K "${key:4:64}" -iv "${iv:4:32}"
    cat $mainDir/data/index 
    rm $mainDir/data/index
    mainMenu
    exit
    ;;
decrypt-all)
    verifyPassword
    key=$(openssl enc -nosalt -aes-256-cbc -pbkdf2 -k $masterPassword -P | grep "key")
    iv=$(openssl enc -nosalt -aes-256-cbc -pbkdf2 -k $masterPassword -P | grep "iv")
    openssl enc -d -nosalt -aes-256-cbc -pbkdf2 -in $mainDir/data/index.enc -out $mainDir/data/index -base64 -K "${key:4:64}" -iv "${iv:4:32}"
    for file in $mainDir/data/*;
    do  
        if [[ $file != "$mainDir/data/index.enc" && $file != "$mainDir/data/index" ]]
        then
            cat $file > $mainDir/result.enc
            openssl enc -d -nosalt -aes-256-cbc -pbkdf2 -in $mainDir/result.enc -base64 -K "${key:4:64}" -iv "${iv:4:32}"
        fi
    done
    rm $mainDir/result.enc
    rm $mainDir/data/index
    mainMenu
    exit
    ;;
help)
    echo "USAGE: ./expass [OPTION] 

    encrypt: $(redprint 'Encrypts') and stores a new entry
    decrypt [EntryTitle]: $(redprint 'Decrypts') the entry stated
    decrypt-all: Decrypt all passwords

    search [Query]: Search for entry
    list: Lists all entries
    help: Lists commands

    export: Exports all necessary data into one file"
    mainMenu
    exit
    ;;
export)
    zip database.expass $mainDir
    mv -v database.expass ~/database.expass
    mainMenu
    exit
    ;;
import)
    mainMenu
    exit
    ;;
exit)
    echo "Have a nice day!"
    exit
    ;;
*) 
    #If no arguments are supplied
    echo "Invalid option - '${OPTION}' detected"
    echo "Type 'help' for more information"
    mainMenu
    exit
    ;;
esac
}

mainMenu